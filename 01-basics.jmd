---
title : Getting started with Julia
author : |
  Michiel Stock
  Bram De Jaegher
  Daan Van Hauwermeiren
date: December 2019
---

# Basic computing
Let's get started with the basics. Some mathematical operations,

```julia
1 + 2       # adding integers

1.0 + 2.0   # adding floats

2 / 4       # standard division

div(2, 4)   # Computes 2/4 truncated to an integer

35 \ 7      # inverse division

1 // 3      # fractions

1//2 + 1//4

'c'        # characters (unicode)

:symbol    # symbols, mostly used for macros

```

variable assignment,

```julia
x = 2

τ = 1 / 37  # unicode variable names are allowed
```

unicode! In most Julia editing environments, unicode math symbols can be typed when starting with a "\ and hitting [TAB].

```julia
# type \alpha  and <TAB>

```

Operators are overrated.

```julia
5x         # This works
```

But strings are quite essential,

```julia
mystery = "life, the universe and everything"
```

and string interpolation is performed with `$`.


```julia
println("The answer to $mystery is $(3*2*7)")
```

All binary arithmetic and bitwise operators have an updating version that assigns the result of the operation back into the left operand. The updating version of the binary operator is formed by placing a, `=`, immediately after the operator.

```julia; term=true
x += 2  # inplace update of x
x += 2  # inplace update of x
```

Similarly to Matlab, when using the REPL, Julia will print the result of every statement by default. To suppress this behavious, just end the statement with a semicolon.

```julia; term=true
a = 10;  # not printed
a = 20
```

# Boolean operators
From zero to one.

```julia; term = true
# Boolean operators
!true
!false
1 == 1
2 == 1
1 != 1
2 != 1
1 < 10
1 > 10
2 <= 2
2 >= 2
# Comparisons can be chained
1 < 2 < 3
2 < 3 < 2
```

Likewise, we have the Boolean logic operators `&&` (AND), `||` (OR) and `⊻` (XOR, exclusive or).

```julia; term=true
true && true
true && false
true || false
false || false
true ⊻ false
true ⊻ true
```

> **Question**: predict the value of the following statements.

```julia; eval=false
x, y = true, false

(x || y) && !(y || y)
(x ⊻ y) && (!x ⊻ !y)
(x || y) ⊻ (x && y)
```

# Control flow
The `if`, `else`, `elseif`-statement is instrumental to any programming language,

```julia
if 4 > 3
  println("A")
elseif 3 > 4
  println("B")
else
  println("C")
end
```

Julia allows for some very condense control flow structures.
```julia
y = condition ? valueiftrue : valueiffalse
```

> **Assignment** Compute the clip function $\min(0, \max(1, x))$ for a given $x$, without making use of the functions `min` and `max`.

```julia; eval=false
x = 2.0

clip(x) = ...
```

# Looping

```julia
characters = ["Harry", "Ron", "Hermione"]

for char in characters
  println("Character $char")
end

for (i, char) in enumerate(characters)
  println("$i. $char")
end

pets = ["Hedwig", "Pig", "Crookhanks"]

for (char, pet) in zip(characters, pets)
  println("$char has $pet as a pet")
end
```

```julia;eval = false
n = 1675767616;

while n > 1
  println(n)
  if n % 2 == 0
    global n = div(n, 2)
  else
    global n = 3n + 1
  end
end
```

(Note: [they got closer to cracking this one](https://www.quantamagazine.org/mathematician-terence-tao-and-the-collatz-conjecture-20191211/?mc_cid=a3adbffb9f&mc_eid=41ed2fca13).)

# Functions
Julia puts the fun in functions. User-defined functions can be declared as follows,

```julia
function square(x)
  result = x * x
  return result
end

square(2)

square(2.0)

square("ni")   # the multiplication of strings is defined as a concatenation
```

A more condensed version of of `square(x)`.

```julia
s(x) = x * x
```

Passing an array to a function that takes a single element as argument takes a special syntax. By putting a `.` before the brackets, the function is executed on all the elements of the Array. More on this in **Part2: collections**.
```julia; eval = false
s([1, 2, 3, 4, 5])   # Multiplication is not defined for Arrays
```

```julia
s.([1, 2, 3, 4, 5])  # This is an elements-wise execution of s()
```

Keyword arguments are defined using a semicolon in the back signature and a default value can be assigned. "Keywords" assigned before the semicolon are default values but their keywords are not ignored.

```julia
safelog(x, offset=0.1; base=10) = log(x + offset) / log(base)

safelog(0)

safelog(0, 0.01)

safelog(0, 0.01, base=2)
```

When functions have a variable number of arguments, one can use the *slurping* `...` operator to denote a variable number of arguments. The argument will be treated as a collection. For example

```julia; term=true
function mymean(X...)
  m = zero(first(X))  # ensures to be the same type as x
  # m = 0.0  # alternative that is less tidy
  for x in X
    m += x
  end
  return m / length(X)
end

mymean(1, 3, 5)

mymean(1, 3, 5, 7)
```

Similarly, the *splatting* operator can be used to split a collection into its individual elements.

```julia
c = [1.0, 3.0, 5.0];

mymean(c...)
```

When unsure of what a function does, the documentation can be viewed by adding a "?" in front of the function.

```julia
# type ?sort and hit <ENTER>
```

For a lot of standard Julia functions a in-place version is defined. In-place means that the function changes one of the input arguments of the function. As an example, `sort()` sorts and returns the array passed as argument, it does not change the original array. In contrast, `sort!()` is the inplace version of sort and directly sorts the array passed as argument.

```julia
my_unsorted_list = [4, 5, 9, 7, 1, 9]

sort(my_unsorted_list)

my_unsorted_list

sort!(my_unsorted_list)

my_unsorted_list
```

# Plotting
Quite essential for scientific programming is the visualisation of the results. `Plots` is the Julia package that handles a lot of the visualisation. `rand(10)`, returns an array of 10 random floats between 0 and 1.

```julia
using Plots

plot(1:10, rand(10), label="first")
plot!(1:10, rand(10), label="second")

scatter!([1:10], randn(10), label="scatter")

xlabel!("x")
ylabel!("f(x)")
title!("My pretty Julia plot")

plot(0:0.1:10, x -> sin(x) / x, xlabel="x", ylabel="sin(x)/x", legend=:none)

contour(-5:0.1:5, -10:0.1:10, (x, y) -> 3x^2-4y^2 + x*y/6)
```

# Exercise
