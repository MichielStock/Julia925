---
title : Collections
author : |
  Michiel Stock
  Bram De Jaegher
  Daan?
date: December 2019
---

# Arrays
Let us start of with the Julia `Array`. It is very similar to lists in Python. A list is defined as follows,

```julia
A = []            # empty array

X = [1, 3, -5, 7] # array of integers
```

## Indexing and slicing
Let's start by eating the frog. Julia uses 1-based indexing...

```julia
 names = ["Arthur", "Ford", "Zaphod", "Marvin", "Trillian", "Eddie"]
 names[0]        # this does not work, sorry Pythonista's

 names[1]        # hell yeah!

 names[end]      # last element

 names[end-1]    # second to last element
```

Array slicing and slicing with assignment:
```julia

  names[3:6]

  names[end-1:end] = ["Slartibartfast","The Whale and the Bowl of Petunias"]

  names
```

## Types
Julia arrays can be of mixed type.

```julia
Y = [42, "Universe", []]
```

The type of the array changes depending on the elements that make up the array.

```julia
@show typeof(A)
@show typeof(X)
@show typeof(Y)
```

When the elements of the arrays are mixed, a the type is promoted to the closest common ancestor. For `Y` this is `Any`.  But an array of an integer and a float becomes an ...

```julia
B = [1.1, 1]
@show typeof(B)

eltype(B)   # gives the type of the elements
```

... array of floats.

## Initialisation
Arrays can be initialised in the classic, very Pythonesque ways.

```julia
C = []  # empty

zeros(5)      # row vector of 5 zeroes
ones(3,3)     # 3X3 matrix of 1's, will be discussed later on
fill(0.5 ,10) # in case you want to fill a matrix with a specific value

rand(2)    # row vector of 2 random floats [0,1]
randn(2)   # same but normally-distributed random numbers
```
Sometimes it is better to provide a specific type for initialisation

```julia
zeros(Int8,5)
```

## Comprehensions and list-like operations
Comprehensions are a concise and powerful way to construct arrays and are very loved by in the Python community

```julia
Y = [1, 2, 3, 4, 5, 6, 8, 9, 8, 6, 5, 4, 3, 2, 1]
t = 0.1
dY = [Y[i-1] - 2*Y[i] + Y[i+1] for i=2:length(Y)-1] # central difference
```

Arrays behave like a stack, elements can be added to the back of the array,

```julia
push!(names,"Eddie") # add a single element
append!(names, ["Sam", "Gerard"]) # add an array
```

"Eddie" was appended as final element of the Array along with "Sam" and "Gerard". Remember, a "!" is used to indicate an in place function. `pop()` is used to return and remove the final element of an Array

```julia
pop!(names)
```

# Matrices
Let's add a dimension and go to 2D Arrays, matrices. It is all quite straightforward,

```julia

Z = [0 1 1; 2 3 5; 8 13 21; 34 55 89]

Z[3,2]  # indexing

Z[1,:]  # slicing
```

It is important to known that arrays and other collections are copied by reference.

```julia
R = Z

@show Z
@show R

R[1,1] = 42

@show Z

```
`deepcopy()` can be used to make a completely dereferenced object.

## Concatenation
Arrays can be constructed and also concatenated using the following functions

```julia
Z = [0 1 1; 2 3 5; 8 13 21; 34 55 89]
Y = rand(4,3)

cat(Z,Y,dims = 2)                # concatenation along a specified dimension

cat(Z,Y,dims = 1) == vcat(Z,Y) == [Z;Y]   # vertical concatenation

cat(Z,Y,dims = 2) == hcat(Z,Y) == [Z Y]   # horizontal concatenation

```

## Vector operations
By default the `*` operator is overloaded for matrix-matrix multiplication

```julia
A = [2 4 3; 3 1 5]
B = [ 3 10; 4 1 ;7 1]

A*B
```

Element-wise operation are done with "dot" operations, for every binary operation like `^` there is a "dot" operation `.^` to perform element-by-element on arrays.

```julia
Y = [10 10 10; 20 20 20]
Y.^2
```

Under the hood Julia is looping over the elements of `Y`. So a sequence of dot-operations is fused into a single loop.
```julia
Y.^2 .+ cos.(Y)
```

Did you notice that dot-operations are also applicable to functions, even user-defined functions?As programmers we are by lazy by definition and all these dots are a lot of work. The `@.` macro does this for us

```julia
Y.^2 .+ cos.(Y) == @. Y^2 + cos(Y)
```

# Higher dimensional arrays
Matrices can be generalised to multiple dimensions.

```julia
X = rand(3,3,3)
```

# Other collections
Some of the other collections include tuples, dictionaries and others.

```julia
tupleware = ("tuple", "ware") # tuples

scores = Dict("humans" => 2, "vogons" => 1) # dictionaries

scores["humans"]

```




# Exercise
## Ridge regression
Ridge regression can be seen as an extension of ordinary least squares regression,

$$\beta\mathbf{x} =\mathbf{b}\, ,$$

where a matrix $\beta$ is sought which minimises the sum of squared residuals between the model and the observations,

$$SSE(\beta) = (y - \beta X)^T (y - \beta X)$$

In some cases it is adviceable to add a regularisation term to this objective function,

$$SSE(\beta) = (y - \beta X)^T (y - \beta X) + \lambda \left\lVert X \right\rVert^2_2 \, , $$

this is known as ridge regression. The matrix $\beta$ that minimises the objective function can be computed analytically.

$$\beta = \left(X^T X + \lambda I \right)^{-1}X^T y$$

Let us look at an example, we found some data on the evolution of human and dolphin intelligence.

```julia
using Plots

blue = "#8DC0FF"
red = "#FFAEA6"

t = 0:10:3040
ϵ₁ = randn(length(t))*15     # noise on Dolphin IQ
ϵ₂ = randn(length(t))*20     # noise on Human IQ

Y₁ = dolphinsIQ = t/12 + ϵ₁
Y₂ = humanIQ = t/20 + ϵ₂

scatter(t,Y₁; label="Dolphins", color=blue,
  ylabel="IQ (-)", xlabel ="Time (year BC)", legend=:topleft)
scatter!(t,Y₂; label="Humans", color=red)

```

> "For instance, on the planet Earth, man had always assumed that he was more intelligent than dolphins because he had achieved so much - the wheel, New York, wars and so on - whilst all the dolphins had ever   done was muck about in the water having a good time. But conversely, the dolphins had always believed that they were far more intelligent than man - for precisely the same reasons."
>
> *Hitchhikers guide to the galaxy*

**Assignment:** Plot the trend of human vs. dolphin intelligence by implementing the analytical solution for ridge regression.